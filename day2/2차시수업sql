-- 데이터베이스 2차시

-- 문자함수
-- concat()함수 연결함수, || 연산자와 동일

select * 
from emp;

SELECT ENAME, JOB
FROM EMP;

SELECT ENAME||' '|| JOB
FROM EMP;

SELECT CONCAT( ENAME, JOB)
FROM EMP;

SELECT CONCAT( ENAME, '님')
FROM EMP;

-- SUBSTR(): 문자열의 일부를 가져올 때
SELECT SUBSTR('0001203521492', 7, 1)
FROM DUAL;

-- INSTR(): 문자열에서 특정 문자의 위치를 반환
SELECT INSTR('02)987-1258',')')
FROM DUAL;

-- LPAD(): 전체 자리수에서 왼쪽부터 원하는 문자로 채운다
SELECT ID FROM STUDENT;
SELECT PW FROM ACORNTBL2;

SELECT LPAD(ID, 10, '0') FROM STUDENT;
SELECT RPAD(PW,10,'*') FROM ACORNTBL2;

-- TRIM, LTRIM, RTRIM   공백제거, 특정문자 제거
SELECT *
FROM ACORNTBL2;

SELECT NAME, TRIM(NAME)
FROM ACORNTBL2;

-- REPLACE(): 문자열에서 문자1, 문자2로 변환해줌\
SELECT *
FROM ACORNTBL2;

SELECT PW, REPLACE(PW,'1234','****')
FROM acorntbl2;

SELECT REPLACE(TRIM(NAME),'김','KIM' )
FROM ACORNTBL2;

-- 이름의 첫 글자가 별로 REPLACE 되도록 하기
SELECT REPLACE(NAME,'이','*')
FROM ACORNTBL2;

-- 이름의 첫 글자만 가져와서 바꾸기(SUBSTR() 이용하기)
SELECT TRIM(REPLACE(NAME,SUBSTR(TRIM(NAME),1,1),'*'))
FROM ACORNTBL2;

-- 이름만 *로 바꾸기
SELECT REPLACE(NAME,SUBSTR(TRIM(NAME),2,2),'**')
FROM ACORNTBL2;

SELECT *
FROM EMP;
-- 82쪽 RPAD 문제 아모르겠다;;;;
SELECT RPAD(ENAME, 9, SUBSTR('123456789',LENGTH(ENAME)+1)) RPAD
FROM EMP
WHERE DEPTNO=10;

--84쪽 1번 2번 3번 4번

SELECT ENAME, REPLACE(ENAME, SUBSTR(ENAME,2,2), '--') REPLACE
FROM EMP
WHERE DEPTNO='20';

SELECT NAME, REPLACE( JUMIN,SUBSTR(JUMIN,7,7),'-/-/-/-') REPLACE
FROM STUDENT
WHERE DEPTNO1=101;

SELECT NAME, TEL, REPLACE(TEL, SUBSTR(TEL,5,3),'***') REPLACE
FROM STUDENT
WHERE DEPTNO1 = 102;

-- - 시작위치: 오른쪽
SELECT NAME, TEL, REPLACE(TEL, SUBSTR(TEL,-4),'****') REPLACE --그 위치에서 전부 다 가져옴
FROM STUDENT
WHERE DEPTNO1=101;

-- 숫자관련 함수

--ROUND, TRUNC, FLOOR, CEIL. MOD
SELECT 987.65 FROM DUAL;
SELECT ROUND(987.65) FROM DUAL;
SELECT ROUND(987.65,1) FROM DUAL;
SELECT ROUND(987.65,-1) FROM DUAL;

--FLOOR: 작은정수, CEIL: 큰정수

SELECT FLOOR(5.65) FROM DUAL;
SELECT CEIL(5.65) FROM DUAL;

SELECT FLOOR(-5.65) FROM DUAL;
SELECT CEIL(-5.65) FROM DUAL;

--MOD
SELECT MOD(10.3) FROM DUAL;

--POWER
SELECT POWER(2,2) FROM DUAL;

-- 날짜관련함수

--현재날짜구하기
SELECT SYSDATE FROM DUAL;

-- 개월 수 구하기( 큰날짜, 작은날짜)
SELECT MONTHS_BETWEEN('2025-3-20','2025-01-07') FROM DUAL;

-- 마지막 날 구하기
SELECT LAST_DAY(SYSDATE) FROM DUAL;

-- ADD_MONTHS: 주어진 날짜에 숫자만큼 달을 추가
SELECT ADD_MONTHS(SYSDATE,3) FROM DUAL;

-- 형변환함수

-- 묵시적 형변환
SELECT 2+'2' FROM DUAL;

SELECT *
FROM member_tbl_11; 

-- 묵시적
SELECT *
FROM member_tbl_11
WHERE m_birthday BETWEEN '2004-01-01' AND '2004-01-31';

-- 
SELECT *
FROM member_tbl_11
WHERE m_birthday BETWEEN TO_DATE('2004-01-01') AND TO_DATE('2004-01-31');

--명시적형변환
-- TO_DATE(): 날짜로 변환( 날짜형식의 문자혈을 날짜데이터로 변환)
-- TO_CHAR(): 문자로 변환( 날짜를 특정 포멧으로 조회할 때, 숫자를 원하는 형식으로 조회할 때)
-- TO_NUMBER(): 숫자로 변환( 숫자형식을 가진 문자를 숫자로 변환)

SELECT SYSDATE, TO_CHAR(SYSDATE,'YYYY-MM-DD')
FROM DUAL;

SELECT SYSDATE, TO_CHAR(SYSDATE, 'YYYY')
FROM DUAL;

SELECT SYSDATE, TO_CHAR(SYSDATE, 'MM')
FROM DUAL;

SELECT SYSDATE, TO_CHAR(SYSDATE, 'MON')
FROM DUAL;

SELECT SYSDATE, TO_CHAR(SYSDATE, 'DD')
FROM DUAL;

SELECT SYSDATE, TO_CHAR(SYSDATE, 'DAY')
FROM DUAL;

SELECT SYSDATE, TO_CHAR(SYSDATE, 'DY')
FROM DUAL;

select to_char( sysdate , 'yyyy"년"mm"일"dd"일"') from dual;

-- MEMBERTBL_11 테이블에서 1월생 조회

SELECT m_birthday, TO_CHAR(m_birthday,'MM')
FROM member_tbl_11
WHERE TO_CHAR(m_birthday,'MM')='01';

-- 숫자를 문자로 변환
SELECT 25600 FROM DUAL;
SELECT TO_CHAR(25600,'999,999')FROM DUAL;
SELECT TO_CHAR(25600,'0999,999')FROM DUAL; --의미없는 0표시
SELECT TO_CHAR(25600,'$999,999')FROM DUAL;
SELECT TO_CHAR(25600,'L999,999.99')FROM DUAL;

-- TO_NUMBER()
SELECT TO_NUMBER('1200'), TO_NUMBER('1200')+100 FROM DUAL;

-- TO_DATE(): 날짜형식으로 변환
SELECT TO_DATE('2025-03-20') FROM DUAL;

-- 일반함수
-- DECODE
-- NVL, NVL2

--M_GRADE
SELECT M_NAME, M_GRAD
FROM member_tbl_11;

--01:VVIP
--02:VIP
--03:BRONZE

SELECT M_NAME, M_GRADE, DECODE(M_GRADE,'01','VVIP','02','VIP','03','BRONZE','대상아님')
FROM MEMBER_TBL_11;

-- 114 유형1
SELECT *
FROM PROFESSOR;

SELECT DEPTNO, NAME, DECODE( DEPTNO, '101','COMPUTER ENGINEERING',' ') DNAME
FROM PROFESSOR;

-- 유형2
SELECT DEPTNO, NAME, DECODE( DEPTNO, '101','COMPUTER ENGINEERING','ETC') DNAME
FROM PROFESSOR;

-- 유형3
SELECT DEPTNO, NAME, DECODE( DEPTNO, '101','COMPUTER ENGINEERING','102','MULTIMEDIA ENGINEERING','103','SOFTWARE ENGINEERING','ETC') DNAME
FROM PROFESSOR;

-- 유형4
SELECT DEPTNO, NAME, DECODE( DEPTNO, '101',DECODE(NAME,'Audie Murphy','BEST!!',' '),' ') ETC
FROM PROFESSOR;

-- 120 1번
SELECT NAME, JUMIN, DECODE( SUBSTR(JUMIN,7,1),1,'MAN',2,'WOMAN') GENDER
FROM STUDENT
WHERE DEPTNO1='101';

-- 120 2번
SELECT NAME, TEL, DECODE( SUBSTR( TEL,1, INSTR( TEL,')' )-1 ),'02','SEOUL','031','GYEONGGI','051','BUSAN','052','ULSAN','055','GYEONGNAM') LOC
FROM STUDENT
WHERE DEPTNO1=101;

--NVL
--NVL2

--NULL
SELECT * FROM MEMBER_TBL_11;

--100+1000=>1100
--NULL(값이 정해지지 않은 상태)+1000 => NULL
--NULL에 연산을 하면 결과가 NULL이다

SELECT M_POINT+1000 
FROM member_tbl_11;

SELECT M_POINT, NVL(M_POINT, 0)
FROM member_tbl_11;

-- NVL2(널이 아닐때, 널일때)
SELECT M_POINT, NVL2(M_POINT,M_POINT+100,200)
FROM member_tbl_11;

-- CASE WHEN

SELECT M_POINT
FROM member_tbl_11;

SELECT M_POINT, CASE WHEN M_POINT >= 3000 THEN '상'
                     WHEN M_POINT >= 2000 THEN '중'
                     ELSE '하'
                END AS "RESULT" --별칭을 줄 때 스페이스나 대소문자 구분하고 싶으면 쌍따옴표 사용
FROM member_tbl_11;


--복수행 함수
select *
from member_tbl_11;

--sum() : 합계 구하기
--avg() : 평균 구하기
--count() : 개수 구하기
--max () : 가장 큰 값 구하기
--min() : 가장 작은 값 구하기

--포인트 합계 구하기
--sum(컬럼명)
select m_point
from member_tbl_11;

select sum(m_point)
from member_tbl_11;

select avg(m_point)
from member_tbl_11;

select max(m_point)
from member_tbl_11;

select min(m_point)
from member_tbl_11;

SELECT M_POINT
FROM member_tbl_11;

--COUNT(컬럼명): NULL제외하고 카운트함
SELECT COUNT(M_POINT)
FROM member_tbl_11;

--COUNT(*) : 전체행의 개수를 반환함
SELECT COUNT(*)
FROM MEMBER_TBL_11;

SELECT COUNT(M_ID)
FROM MEMBER_TBL_11;

--테이블의 전체행의 개수를 구할 때 COUNT(*)

--GROUP BY절
SELECT M_GRADE, M_POINT
FROM MEMBER_TBL_11;

--그룹을 만들기 전의 상태의 쿼리를 작성한다

SELECT M_GRADE, SUM(M_POINT)
FROM member_tbl_11
GROUP BY M_GRADE;

-- 그룹되기전의 조회 완성하기 중요!!

SELECT M_GRADE, M_POINT
FROM MEMBER_TBL_11
WHERE M_POINT IS NOT NULL;

SELECT M_GRADE, SUM(M_POINT)
FROM MEMBER_TBL_11
WHERE M_POINT IS NOT NULL
GROUP BY M_GRADE;

SELECT M_GRADE, AVG(M_POINT)
FROM MEMBER_TBL_11
WHERE M_POINT IS NOT NULL
GROUP BY M_GRADE;

SELECT M_GRADE, MAX(M_POINT)
FROM MEMBER_TBL_11
WHERE M_POINT IS NOT NULL
GROUP BY M_GRADE;

SELECT M_GRADE, MIN(M_POINT)
FROM MEMBER_TBL_11
WHERE M_POINT IS NOT NULL
GROUP BY M_GRADE;

-- 고객등급별 포인트 합계 구하기 완성
SELECT M_GRADE, SUM(M_POINT)
FROM MEMBER_TBL_11
WHERE M_POINT IS NOT NULL
GROUP BY M_GRADE;

--그룹화된 결과내에서 조건을 주고싶을 때
--필터( HAVING절 추가):
SELECT M_GRADE, SUM(M_POINT)
FROM member_tbl_11
WHERE M_GRADE IS NOT NULL
GROUP BY M_GRADE
HAVING SUM(M_POINT)>=5000;-- HAVING은 GROUP BY절이 있는 경우만 사용

SELECT M_GRADE, SUM(M_POINT)
FROM member_tbl_11
WHERE M_GRADE IS NOT NULL
HAVING SUM(M_POINT)>=5000
GROUP BY M_GRADE; --결과가 나오긴 함

SELECT M_GRADE,SUM( M_POINT) AS "TOTAL" --SELECT 절에 있는 별칭(ALIAS)은 순서적으로 SELECT절 다음부터 사용가능
FROM MEMBER_TBL_11
GROUP BY M_GRADE
ORDER BY TOTAL;


SELECT M_GRADE, M_POINT
FROM member_tbl_11;

--그룹화
SELECT M_GRADE, SUM(M_POINT)--3
FROM member_tbl_11          --1
GROUP BY M_GRADE         ;  --2

--그룹화
SELECT M_GRADE, SUM(M_POINT)--4
FROM member_tbl_11          --1
GROUP BY M_GRADE            --2
HAVING SUM(M_POINT)>=5000;  --3

--정렬
SELECT M_GRADE, SUM(M_POINT)--4
FROM member_tbl_11          --1
GROUP BY M_GRADE            --2
HAVING SUM(M_POINT)>=5000   --3
ORDER BY 2;

SELECT M_GRADE, SUM(M_POINT) AS "TOTAL"--4
FROM member_tbl_11          --1
GROUP BY M_GRADE            --2
HAVING SUM(M_POINT)>=5000   --3
ORDER BY TOTAL;


SELECT *
FROM MEMBER_TBL_11;

--그룹화하기전단계만들기
SELECT M_GRADE, M_POINT
FROM MEMBER_TBL_11;

--조건추가하고싶으면 WHERE

SELECT M_GRADE, M_POINT
FROM MEMBER_TBL_11;

--그룹화
SELECT M_GRADE, COUNT(M_POINT)
FROM MEMBER_TBL_11
GROUP BY M_GRADE;

--그룹화된 결과내에서 조건에 맞는것 조회하기(HAVING절 추가하기)
SELECT M_GRADE, COUNT(M_POINT)
FROM MEMBER_TBL_11
GROUP BY M_GRADE
HAVING COUNT(M_POINT)>=3;

--위의 결과에 정렬 추가하기
SELECT M_GRADE, COUNT(M_POINT)
FROM MEMBER_TBL_11
GROUP BY M_GRADE
HAVING COUNT(M_POINT)>=3
ORDER BY 2 DESC;

SELECT M_GRADE, COUNT(M_POINT) AS "TOTAL"
FROM MEMBER_TBL_11
GROUP BY M_GRADE
HAVING COUNT(M_POINT)>=3
ORDER BY TOTAL;


SELECT CUST_NM, SUM(SALES_AMT)
FROM PROD_SALES
GROUP BY CUST_NM;

--고객별 구매횟수가 7만 이상
SELECT CUST_NM, SUM(SALES_AMT)
FROM PROD_SALES
GROUP BY CUST_NM
HAVING SUM(SALES_AMT)>=70000;